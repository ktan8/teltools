#!/usr/bin/python


import os
import numpy as np
import matplotlib.pyplot as plt
import re
from scipy.signal import medfilt
from estimateTelomereLength import reverseComplement, generateMotifCombinations, searchForMotif


def calc_telomere_length_penalty(countsAcrossRead, penalty = 0.5, check_read_terminus = 0):
	'''
	Calculate the length of telomeres based on a 
	penalty based metric
	'''

	#print(countsAcrossRead)
	#print(countsAcrossRead[-])
	#countsAcrossRead_flip = np.flip(countsAcrossRead)
	readLength = len(countsAcrossRead)
	scoreAcrossReadSum = np.zeros(len(countsAcrossRead))
	score_total = 0

	range_iter_vals = range(len(countsAcrossRead))
	if check_read_terminus == 1:
		range_iter_vals = reversed(range_iter_vals)

	for i in range_iter_vals:
		score_curr = countsAcrossRead[i]
		if score_curr == 1.0:
			score_total += 1
		else:
			score_total -= penalty
		scoreAcrossReadSum[i] = score_total
	# print(scoreAcrossReadSum)
	max_idx = np.argmax(scoreAcrossReadSum)
	max_score = scoreAcrossReadSum[max_idx]
	teloLen = -1
	if check_read_terminus == 1:
		teloLen = readLength - max_idx
	else:
		teloLen = max_idx
	#print(teloLen)


	#plt.plot(scoreAcrossReadSum)
	#plt.show()



	return teloLen, max_score






def analyze_sequence_for_motif_penalty(string, motif, sequence_name, pic_format="png", 
	penalty=0.5, folder="./"):
	'''
	Analyze an input sequence for a motif of interest.
	For instance, one can input the 'TTAGGG' sequence to look
	for telomeres
	'''
	# if not os.path.exists(folder):	
	# 	os.mkdir(folder)
	# sequence_name_clean = re.sub("/", "_", sequence_name) # in case slash is in the readname
	# output_image = folder + sequence_name_clean + "." + pic_format

	stringLength = len(string)
	motifRevComplement = reverseComplement(motif)


	# Count for forward strand
	fwdMotifCounts = searchForMotif(string, motif)
	# fwdMotifCountsAve, fwdMotifCountsAveMedian = denoiseData(fwdMotifCounts, 
	# 	movingAveWindow=movingAveWindow, medianKernelSize=medianKernelSize)
	# (fwdTelomereStart, fwdTelomereEnd, fwdTelomereLength, 
	# 	fwdTelomereRegions, fwdAverageTelomereSignal) = calc_telomere_length(fwdMotifCountsAveMedian, threshold=threshold)
	fwdTelomereLength, fwdMaxTelomereSignal = calc_telomere_length_penalty(fwdMotifCounts, check_read_terminus = 1, penalty=penalty)
	fwdTelomereStart = stringLength - fwdTelomereLength
	fwdTelomereEnd = stringLength
	fwdTelomereRegions = 1

	# Count for reverse strand
	revMotifCounts = searchForMotif(string, motifRevComplement)
	# revMotifCountsAve, revMotifCountsAveMedian = denoiseData(revMotifCounts,
	# 	movingAveWindow=movingAveWindow, medianKernelSize=medianKernelSize)
	# (revTelomereStart, revTelomereEnd, revTelomereLength, 
	# 	revTelomereRegions, revAverageTelomereSignal) = calc_telomere_length(revMotifCountsAveMedian, threshold=threshold)
	revTelomereLength, revMaxTelomereSignal = calc_telomere_length_penalty(revMotifCounts, check_read_terminus = 0, penalty=penalty)
	revTelomereStart = 0
	revTelomereEnd = revTelomereLength
	revTelomereRegions = 1


	finalResult = []

	if fwdTelomereLength > revTelomereLength:
		finalResult =  [fwdTelomereStart, fwdTelomereEnd, fwdTelomereLength, 
		fwdTelomereRegions, fwdMaxTelomereSignal, stringLength, "forward",]
	else:
		finalResult =  [revTelomereStart, revTelomereEnd, revTelomereLength, 
		revTelomereRegions, revMaxTelomereSignal, stringLength, "reverse"]

	
	# # For aesthetics. If it is forward, we plot forward
	# # on top of reverse. If it is reverse, we plot reverse
	# # on top of forward.
	# plt.figure(figsize=(9,4.8))	

	# if finalResult[6] == "forward":
	# 	# Plot reverse motif call
	# 	plt.plot(revMotifCountsAve, color='mistyrose', ls='-')
	# 	plt.plot(revMotifCountsAveMedian, color='maroon', ls='-')

	# 	# Plot forward motif call
	# 	plt.plot(fwdMotifCountsAve, color='lightsteelblue', ls='-')
	# 	plt.plot(fwdMotifCountsAveMedian, color='royalblue', ls='-')

	# else:
	# 	# Plot forward motif call
	# 	plt.plot(fwdMotifCountsAve, color='lightsteelblue', ls='-')
	# 	plt.plot(fwdMotifCountsAveMedian, color='royalblue', ls='-')

	# 	# Plot reverse motif call
	# 	plt.plot(revMotifCountsAve, color='mistyrose', ls='-')
	# 	plt.plot(revMotifCountsAveMedian, color='maroon', ls='-')


	# #plt.figure(figsize=(80,50))



	# # Plot vertical line
	# plt.axvline(x=finalResult[0], color='grey', ls='--')
	# plt.axvline(x=finalResult[1], color='grey', ls='--')


	# plt.xlabel("Position (bp)")
	# plt.ylabel("Telomeric repeat signal")
	# plt.ylim(-0.05,1.05)

	# #plt.show()

	# # build a rectangle in axes coords
	# left, width = 0.01*len(string) , len(string)
	# bottom, height = 0, 1
	# right = left + 0.55 * width
	# top = bottom + 0.98 * height


	# telomereLengthString = 'Telomere length (nt) = ' + str(finalResult[2])
	
	# # Decide where to place the text depending on whether
	# # the telomeric region is in the forward or reverse direction
	# if finalResult[6] == "forward":
	# 	plt.text(left, top, telomereLengthString,
	#         horizontalalignment='left',
	#         verticalalignment='bottom')
	# else:
	# 	plt.text(right, top, telomereLengthString,
	# 		horizontalalignment='left',
	# 		verticalalignment='bottom')

	# plt.savefig(output_image, format=pic_format)
	# plt.close()
	
	finalResult.append(string)	
	
	return finalResult


if __name__ == "__main__":
	string 	= "AGGGATTATTTGGGTGAAGAGTGGATCGTATTATTGATCACCCACCATGTACCTAAACCCACAGTGAGGATCTCTCTGTTCCCACAAGCCTTAAGTGGGGCATCCCAGTCGGGGGTAAGGCAGTAGCCATTGGAACAACAGAACAAAGGAAAAAGGTGGAGACTTGGAGCCAGACATCTCACGCGCAGGAAGTGAAGAAGTCCCAATAAAATTCCTGACAGGGACTCTTAGGCCTGTTTTAATGCACCGCTCAGCCACTCAATCCCATTTTTTCTACAAAAGCTATTTCACAACTTGGGTTGCTTTTGCAAATGAGTTATATGCCATTTGGTAATGCCTATTGGTGAAAACTTTTACTTCTTCAAAGTTAAACCAAGAAACTGGGACAATCGCCCTCCCTCGCTAATAGCTCGTTCAAGTTGATTTACAGAACTGATGGGGCTAATAAACGCGCTCTCTCTGGACTTTAGGGGCGCAGTGAGGCCGTAACACCAGGACCCAAGGGCCCTGCCTAGTCCCAATCTGCTCCGCAGGTGGCGTGCAGCCACGCGACACTGACAGCAATAAGGCCGGCAGTGTCATCATCGATGCAGGACAGGCGGCGTTACGGGCACCACACCATAATGCAAGATGACCAGCAGTGCCATGTCGTCGCTGCCACACACGGGAGCAAGAGGATCCTGGAGTGCTCCCAGAGGATAGAGCGGCGTGCCCGACTATACTGCAGGCAAGAGGGTCCTGGGCATTGTCCCAGCTGCAGGTAGGCGGGCGTGATGCCACTACACGTGAGCACAAGAGGGTCGGAAAGTGTCACAAGCTGACAGCAGGCGGGCGTGCTGCCACTACACTGTGTAGCAAGAGGGCCCCTGAAACCGTCCCGTAGCTGCAGCAGGCCGGCGGCCGCCACTATTTAGCGAGCAAGAGATCCTGAAGCGACCCGGAGACCAGCAGGGGACGCGTGCCACCAGGTAAGAAAGAGGGACTGCGGTGTCCTAGCCGCTAGCAGGGGGCGCAATGTGGAAAGCACCGCGGGTAGCGGGTCCTGTAGCTTGCACGGCTTGCAAGCAGGGGGCCCAGAGGACGGCTTTTCGGATTACGAGGTTTCAACCCGTCTCGCTGCCGCGCCCCGGGGAAGTGAGTCTCTGCCTGACAAAACGCTCCAACCCCCGCGCCTGTCCCGGTTGGCGTGTTGGACTGTGGATGGCGCGTTCGCGCGCTGCCCCCAGCCACCCAGGGGAACAGCGCAAAGGTGGATGCTAGACGAGCACTCCCCCGCCCCCACAGGGGAACGAGATCTCTGAGCCTGCGCCGGCGAGCCGAAGCCTCTCTGCGCCTGACAGAGGCGGCGAGGCCGAGCCTCTCTCTGCGCCTGCGCGGCGCGCCGGCCTATCTGCGCCTGCGAGGCGCAGCGGACGCCCTAGGTGCCGCCTGGCGGAGGCCGCCCGCGCCTCTGCGCCCGCGCCGGCGCGACGCCTTGGCCGCCTGCGCACGGCAGTCGGATTTATCAGCATCCTATTGTAGTGGTGTCACCGGCGGCGCGGCCGGCGAGCTCTCCTTTGTCTGTTCGTCTATGCCCACTTTCTACCTTGCCTGTGTCTCCCTTTCCATTGCTCCCGCTCTCTTCTCTCCCCCTTACTTGACAGCGCCATTCTGGCGTCGAGAGATTGCGCATCGGCGTCTGCTCTTGCTTGCGGCACAGGAATGCGAAACGGACGAGAGCACACGTGGGCAGCCTGCGCCGTCACTCGCGCCCTGCGGCGTGGCGCGCCGCGCAGGCTCTATGTCGCGTACGAGCCAGGCCGCGCCGAGCCGGTCTGCGCCCTGACGCCGGAGCGCCGACGCCTCTTGCGCCCTGCGCCGGGCCGCGCCGCGCCTGCTCTGCGCCCTGCGCCGCGCGCGCGGCCTCTCTGCGCCTGCGCCGGCGCGCCGCGCCTCTCATGCGCCGCGCCGCGCGGCCGCGGCGCGCGCTTCGCTGTTTACGCCTAGCGCGGGTGTGCCAGGCCGGCCGACGCCTGCTCGAGCCTGCGCCGTGGGCACGCCAAGCGCCTTCTCTGCGCCTGCGCGGGGCGGGACTGAGACCACTCTCATGGACTGCGCCGGCGCGCCGTGAGTTGCCTCTTCTGCGCCCCCTGCGCCGGGCGCGCCGAGCCTTATGCGCCATGCTGGCGGCGCCGCACGCGACTATCTGCGCACAGAGACGTTGCTGCGCCGACCTGGTGCGAGGGATCTTTGTGGAGTTGCAGTTCTCCTTAAGCACAGTAACCCGGAGAGCATCGCGAGGGGGAGCTGCGTTTGCTGGCACAGCCGGAGGATGCTGTGAAAGGGGATCAGCAGCGTGCTCCTCAGCACAGACCCCGCCGGGCGTGGTTATCCGGCCGGCACCGCGAAGGCGGGAATGCGTTCTGCCTCAGCAGCCACCCGGTGGTAAACAAAAGGTGGGAAGAAGCTTCTCGCAGCATCGACCCTGGTGTTGGGTTAGGGTAGGGGTTGGCGCTTGTAGGGTTCGGGTTAGGGGTTTAGGGGGTAAGGGTTCGGGTTAGGGTTAGGGTTAGGGTTCGGGTTAGGGTTCGGGTTAGGGTAGGGTTAGGGGTGTCGGGTTAGGGTTCGGGTAGGTGTTTGTGAGGGGTTAGGGGGTGCATAGGGGAGTAAGGTAGTTAGGGGGTTTAGGTTAGGGTTAGGGTTAGAGGTTGGGTTGTTAGGTGTTTAGGAGCGGTTACAGGGTTAGGGTTAAGCGGGTGTAGGGTAGTAGGGTAGGGTGAGGGTTAAGGGTTAGTGGTAGGGTTGGGGTTGGGGTGGGGGGTGAGGCAGTGAGGGTAGAGTGGTGAGGGTAGAGGGTGAGGGTGAGGAGTGAGGGTTAGGGTTAAGCGCTCCACAGGGTTTAGGGGTGCAAGAGTGACGGGTGAGGGTGAGGGATAGGGTGAGGGGTATAGTGGTGTAGGGTTTTTGTAATGGTCAGAGGGTCTAGGGGGTAGGGTTGCTAGGGTGAGTGGTAGGGGTAGGGCGTTATAGTTAGGGGTTTAGGGTTGGTTCGGGATTAGGGTTGGGTTAGGGTTCAGGGGTTAGTGGTTAGGGTTGGGTTAGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTGCTAGGGTTTTAGGGTCGTTAGGGTTAGGGTCTGAGGGGTTAGGGGCTGCAGGGGTGAGGGGATGAGGGTGGGGTTAGGGTGTAGGGTTAGCGGTGTTGGGTTAGGTGTTAGGGTTAGGGTGATAAGGGTTAGGGTTAGGGTATCTAGGGTTAGGGTTAGGGTCTTCGGGGTAGGGTTAAGGGGTTGGGTTAGGGTTAGGGAGGGTTAGGGTTTTTAGGGCTTAGGGTAGGGTTGGGGGTTGGGGTTGGCGGCTGTTGAGGGGCCACGGTGGGTGGGGGGTTTGTAGGCGGTGTAGGGTCGGGTAGGGTTGGGCGTTAGGGTTAGGGTAGGGTCTTAGGGTTAGGGTTGAGGGTTAGGGTGATGGTGGGGGTCTGCGGTGTACCTGACGAGGGTGGAGGTGGGGAGGGTGAAGGACCGTGAGGGTGGAAGGGTGAGGGAAGACGAGGTGCAGGGTAGGGTTAAGGGGGGTTAGGGTTCTGGGTTGGTGGGTGAGGTTGAGGGTGAGGGTGGGGTGCGGTGTGGGGTGAGGGTTGACGGGTTGAGGGTGAGGGATAGGGTTAGGGGTTAGGGTATGGGTTAGGGTATAGGGTTAGGGGTAGGGGGTAGGGTTAGGTAGGGTTAGGCGTTAGGGTGAGGGTTAGGGTAGGGTTAGAGTATAGGGTTTGGGTGTAGGGTTAGGGTTAGGGTAGGGTAGGGTAGGGTTTAGGGTAGGGTTAGGGTTGGGTTAGGGTTAGTTAGGGTAGGGTTAGGGTTAGGGTTAGGGTTTAGGGGTAGGGTAGGTTTTAGGGTTAGGGTGTATAGGTAGGGTTTAGGGTTAGGGTTAGGGTTAGGGTTAGGTGGGTATAGGGTTGTGGTTCGGTTAGGGTTCAGGGTAGGGTTAGGGTTTAGGGTTAGGGTAGGGTTAGGGTCTAGGGGTAGGGTGTCGGGTAGGGTTGGGTTAGGGTTAGGGTTAGGGATATTAGGTTAGGTTACGGGTTCAGGGTTGGGGTTAGGGTCTTAGGGTTTGGGTTAGGGGTAGGGTTAGGGTTAGGGTGGTTAGGGTTAGGGTTAGGGTTAGGGTTCGGGTTAGAAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGGTTAGGGTTAGGGGGGATGGTTAGGGTTAAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGGTAGGGCTTAGGTTAGCGGTGGATCAAGGGTTAGGTTTAGGTGTAAGGGTGTTACGCGGGGTTAGAGGGTTAGGGGTTAGGTGGGGTGTAGGTTGAGGTATAGGGTTAGGTGTTTAGGGGTTGTAGGGTTAGGTTAGCGGTTGTAGGGTTGTGGAGGTTGCGGTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTGGGTTAGGGGTTAGGGTTAGGGTTAGGGGCGAGGTTACTAGGCGTTTAGGTGTAGGGTTACTTGAGGGTTAGGGTTAGGGTGGGTGAGGGGGCTGTAGGGCTAGGGTATAGGGTTCGGGTAGGTTAGGGTTAGGGTTAGGGGGGTAGGGTATAGGGTAGGGGTTAGGCGTTCGGGTTAGGGTAGGAGTTAGGGTTAGGGTTAGGGTTTCGGGTTGGGTTAGGTTAGGTAGGGTTAGGGTGTAGGGTTAGGGTTAGGGTTAGGGTGTAGGGGTTGGGGAGTTAGGGTACGGGTTCGGGTTAGGAGTTAGGGTTAGGGTATAGGGTTCGGGTTCGGGTTAGGGTGTGTAGGGTTTGGTTTAGAGGTTAGGGTTAGGGTGAGGGTAGGGTTAGGGTTGGGATTAGGGGTTGGGTAATCGGGTTAGGGTTAGGTTAGGGAGCGGTTAGGTTAGGGTTAGGGGTTCGGGTTGGGTTAGGGTTAGGGTTGGGGGGTTGTAGGGTTAGGGTTAGGGTTAGGTTAGTGTTAGGGTAGGGTTCGGGTTAGGATAGGGGTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTATGGGTTGGGTTAGGGTTAGGGTTATGAGGCGTTAGGGTTAGGGTGTTAGGGTTAGGGTAGGGTTAGGGTTTAGGGTTAGGGTTAGGGATTGAGGGGTTAGGGTTTGGTTAGGGTTAGGGTGGTATTTAGGGTTAGGGTTAGGGTTCAGGTTCGGGGTTAGGGTTTTAGGGTTAGGGTAGGGTTAGGGTTAGGGGCGTAGGGTTAGGGGTAGGGTTAGGGTTAGGTTTAGGAGTTAGGTCTAAGGGGTTAGGGTGATGGGTTAGGGTTGGGTTAGGGTTAGGGTTAGGGTAGGCTTAGGTTAGGGTTGAGGGGTATGGTAGGGTTCAGGGTAGGGTTAAGCGGTTAGGTGTTAGGGTTGGTGGTGAGCGGGGTAGGGTAGGGTTAGGGTTTAGGGTTAGGGTTGGTTAGGGTAGGGTTAGGGTTAGGCTTAGGGTTAGGGTTGGGTTAGGGTGTAGGTTAGGGTCGCGGTTAGGGTTAGGGTTCAGGTCTTTAGGTTAGCATTAGGGTTAGCGTTAGGGTTAGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTTAGGTAGGGTAGGGGTTAGGGAGGGGTTAGGGTTTAGGGTTAGGGGTAGGGTTAGGCGAGGGTTAGGGTTAGGGTTAGGGTAGGGTTAGGGTGGGTTATGGGTAGGGTTAGGGTTAGGGTTAGGGTTAGTGTAGGGTTGGGTTAGGGTTAGGGTTAGGGCTTAGGGTTAGGGTTCGCGGTAGGGTTAGGGTTAGGGTATAAGGGTTAGGGTTAGTTAAAGGGTTCAGGTGTTAGGGTTAGGTTAGGTTTAGGGTAGGGTAGGGGTTAGGGGTTAGGGTTGGGTTAGGTTTTAGGTTAGGGGTAGGGTCTTAGGGGTAGGGTTGAGGGTTAAGGGTTAGGGTTAGGGTTAGGGTTAGGAGTCGGGTTGGGTAGGGTTAGGGTGTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTTTAGGGTTAGGTGTGTATGGGGTGGGGGGTGAGGGTTAGGGTTAGGTTTAGGGTTAGGTTAGGCTTAGGGAGGGGTTAGGTTAGGGTTTAGGGTTAGGGTTAGGGTTAGGTTAGGGTTAGGGTTAGGGTAGGGTTGAGGGTAGGGTTAGGGTTAGGTAGGGGTAGCCGGTAGGGTTAGGGTTAGGTATAGGGTTAGGGTAGGTTAGGGTTAGGTTAGTTAGGGTTAGGGTTGGGTTAGGGGTAGGGTTAGGGTTAGGCGTTAGTGTGGGTTAGGGTACGGGTTAGGTTATGTTTAGGGTGGGTTAGGGGTGGGTTAGGCGTTAGGGTCTAGGGTTTTAGGTTCGGGTTAGGGTTAGGGTTAGGGTTAAGGGTAGGGTTGGGTGGGGGGGGTTAGGGTTAGGGTTGCTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTATGGTTTCGGGGTGTGAGGTAGCGTTCG"
	motif 	= "TTAGGG"
	string = str(string)
	motif = str(motif)
	penalty = 0.5
	
	print(analyze_sequence_for_motif(string, motif, "apple", penalty=penalty))